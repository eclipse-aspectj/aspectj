<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.aspectj</groupId>
	<artifactId>aspectj-parent</artifactId>
	<version>1.9.22</version>
	<packaging>pom</packaging>

	<name>AspectJ Parent Project</name>

	<properties>
		<!-- Basic build properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!--
			Set fixed timestamp for reproducible builds,
			see https://maven.apache.org/guides/mini/guide-reproducible-builds.html
		-->
		<project.build.outputTimestamp>2024-01-01T00:00:00Z</project.build.outputTimestamp>

		<!-- By default, do not deploy artifacts - override for the ones which actually should be deployed -->
		<maven.deploy.skip>true</maven.deploy.skip>
		<!-- By default, do not create javadoc - override in release profile or manually -->
		<maven.javadoc.skip>true</maven.javadoc.skip>

		<!-- Dependency versions -->
		<jdt.core.version>1.9.22</jdt.core.version> <!-- AspectJ_JDK_Update -->
		<asm.version>9.6</asm.version> <!-- AspectJ_JDK_Update -->
		<commons.digester.version>3.2</commons.digester.version>
		<commons.logging.version>1.3.0</commons.logging.version>
		<lib.ant.version>1.6.3</lib.ant.version>
		<lib.ant.xerces.version>2.6.2</lib.ant.xerces.version>
		<lib.regexp.version>1.2</lib.regexp.version>
	</properties>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
		<site>
			<id>aspectj-site-local</id>
			<!-- Use mvn site:deploy from root directory to create multi-module Maven site there -->
			<url>file://${user.dir}/aj-build/dist/site</url>
		</site>
	</distributionManagement>

	<repositories>
		<!--
			Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
			Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
			in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
			https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
		-->
		<repository>
			<id>central</id>
			<name>Central Repository</name>
			<url>https://repo.maven.apache.org/maven2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</repository>
		<repository>
			<id>ossrh-snapshots</id>
			<name>Sonatype OSSRH snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<layout>default</layout>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</repository>
	</repositories>

	<pluginRepositories>
		<!--
			Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
			Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
			in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
			https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
		-->
		<pluginRepository>
			<id>central</id>
			<name>Central Repository</name>
			<url>https://repo.maven.apache.org/maven2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</pluginRepository>
		<pluginRepository>
			<id>ossrh-snapshots</id>
			<name>Sonatype OSSRH snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<layout>default</layout>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</pluginRepository>
	</pluginRepositories>

	<modules>
		<module>lib</module>
		<module>util</module>
		<module>bridge</module>
		<module>testing-util</module>
		<module>org.aspectj.matcher</module>
		<module>asm</module>
		<module>testing-client</module>
		<module>runtime</module>
		<module>bcel-builder</module>
		<module>weaver</module>
		<module>loadtime</module>
		<module>org.aspectj.ajdt.core</module>
		<module>ajde.core</module>
		<module>ajde</module>
		<module>ajdoc</module>
		<module>taskdefs</module>
		<module>testing</module>
		<module>testing-drivers</module>
		<module>tests</module>
		<module>build</module>
		<module>run-all-junit-tests</module>
		<module>docs</module>

		<!-- create the important artifacts we care about -->
		<module>aspectjrt</module>
		<module>aspectjweaver</module>
		<module>aspectjtools</module>
		<module>aspectjmatcher</module>

		<!-- build the java -jar'able installer -->
		<module>installer</module>
	</modules>

	<!--
    Caveat: Automatic, JDK-based profile activation can *not* be inherited by child POMs defining
    the same profiles. Thus, we have to repeat activation conditions there.

    Note: We can check if automatic profile activation works via mvn help:active-profiles.
  -->
	<profiles>
		<profile>
			<id>jdk-8-to-15</id>
			<activation>
				<jdk>[1.8,16)</jdk>
			</activation>
			<properties>
				<jvm.arg.addOpens/>
				<jvm.arg.allowSecurityManager/>
			</properties>
		</profile>
		<profile>
			<id>jdk-16-to-xx</id>
			<activation>
				<jdk>[16,)</jdk>
			</activation>
			<properties>
				<jvm.arg.addOpens>--add-opens java.base/java.lang=ALL-UNNAMED</jvm.arg.addOpens>
				<jvm.arg.allowSecurityManager/>
			</properties>
		</profile>
		<profile>
			<id>jdk-18-to-xx</id>
			<activation>
				<jdk>[18,)</jdk>
			</activation>
			<properties>
				<!--
					JEP 411: Deprecate the Security Manager for Removal, see https://openjdk.java.net/jeps/411.
					As of Java 18, the new API for blocking System.exit is not available yet, see
					https://bugs.openjdk.java.net/browse/JDK-8199704.
				-->
				<jvm.arg.allowSecurityManager>-Djava.security.manager=allow</jvm.arg.allowSecurityManager>
			</properties>
		</profile>
		<profile>
			<id>release</id>
			<properties>
				<maven.javadoc.skip>false</maven.javadoc.skip>
				<maven.source.skip>false</maven.source.skip>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>fast-build</id>
			<properties>
				<!-- Do not compile tests (also skips execution) -->
				<maven.test.skip>true</maven.test.skip>
				<!-- Do not execute tests (redundant, but just to be sure) -->
				<skipTests>true</skipTests>
				<!-- Do not create documentation for AspectJ website -->
				<createDocs>false</createDocs>
			</properties>
		</profile>
	</profiles>

	<build>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.1</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.22.2</version>
					<configuration>
						<!--<testFailureIgnore>true</testFailureIgnore>-->
						<argLine>
							${jvm.arg.addOpens}
							${jvm.arg.allowSecurityManager}
						</argLine>
						<excludes>
							<exclude>**/*ModuleTests.java</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-help-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>3.2.0</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>package</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.2.0</version>
					<configuration>
						<archive>
							<addMavenDescriptor>false</addMavenDescriptor>
						</archive>
					</configuration>
					<executions>
						<execution>
							<id>test-jar</id>
							<goals>
								<goal>test-jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>3.3.0</version>
					<configuration>
						<createSourcesJar>true</createSourcesJar>
						<createDependencyReducedPom>false</createDependencyReducedPom>
						<shadedArtifactAttached>false</shadedArtifactAttached>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.3.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>3.0.0-M3</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>3.1.1</version>
				</plugin>
				<!--
					TODO: MSHADE-36 is in Maven Shade 3.3.0 -> it should be possible to include the dependency-reduced POM there
					      directly. So maybe, we can rid of Flatten Maven Plugin.
				-->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>flatten-maven-plugin</artifactId>
					<version>1.2.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>1.6</version>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
							<configuration>
								<!-- Only sign artifacts which are also meant to be deployed -->
								<!--suppress UnresolvedMavenProperty -->
								<skip>${maven.gpg.skip}</skip>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.2</version>
					<executions>
						<execution>
							<id>default-deploy</id>
							<phase>deploy</phase>
							<goals>
								<goal>deploy</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<!-- Deploy at the end of a multi-module build -->
						<deployAtEnd>true</deployAtEnd>
					</configuration>
				</plugin>
				<plugin>
					<!--
						Other than Maven Deploy, this plugin cannot just be added to the 'build/plugins' section of the parent POM
						once and (de-)activated with a simple property like 'maven.deploy.skip' on a per-module basis. See also
						https://issues.sonatype.org/browse/OSSRH-68966. Consequently, we do not add it to the parent but separately
						to each module meant to be published.
					-->
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>1.6.8</version>
					<extensions>true</extensions>
					<configuration>
						<serverId>ossrh</serverId>
						<nexusUrl>https://oss.sonatype.org/</nexusUrl>
						<!-- Activate in order to directly release to Maven Central after successful staging -->
						<autoReleaseAfterClose>false</autoReleaseAfterClose>
					</configuration>
					<dependencies>
						<!--
							Plugin version 1.6.8 does not work on JDK 16+ without special MAVEN_OPTS opening certain modules,
							because the XStream version used needs it. One workaround is to use a more recent XStream version.
							Attention: Do *not* upgrade to e.g. 1.4.18, because it causes exceptions during deployment.
							TODO: remove plugin dependency after OSSRH-66257, NEXUS-26993 are fixed.
						-->
						<dependency>
							<groupId>com.thoughtworks.xstream</groupId>
							<artifactId>xstream</artifactId>
							<version>1.4.15</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>truezip-maven-plugin</artifactId>
					<version>1.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>3.6.3</version>
					<!--
						FIXME: This configuration works with JDK 16, but throws errors on other JDK versions, e.g. 14. It looks as
						 if the Maven Javadoc plugin does not do a particularly good job applying the plugin settings in a way
						 making it work with different JDK javadoc tool versions. I am saying that, because when using the tool
						 directly on the console, it works with basic settings and the correct classpath.
					-->
					<configuration>
						<!-- TODO: Include 'aj' package for ASM-renamed contained in aspectjtools? -->
						<subpackages>org.aspectj</subpackages>
						<!-- Deactivate doclint checks in order to suppress errors -->
						<doclint>none</doclint>
						<!-- Generate class use xref, making javadocs considerably bigger, but also more informative -->
						<use>true</use>
						<!-- FIXME: Why does it fail without this parameter? -->
						<javadocVersion>8</javadocVersion>
						<!--
							Avoid non-English javadoc generation. Due to https://bugs.openjdk.org/browse/JDK-8222793 reoccurring at
							least in JDKs 19-21 and also being broken in some older JDKs, we cannot rely on just setting the locale
							parameter, but also need the 'user.language' and 'user.country' parameters in 'additionalJOptions' as a
							workaround.
						-->
						<locale>en</locale>
						<additionalJOptions>
							<additionalJOption>-J-Dfile.encoding=UTF-8</additionalJOption>
							<additionalJOption>-J-Duser.language=en</additionalJOption>
							<additionalJOption>-J-Duser.country=US</additionalJOption>
						</additionalJOptions>
						<!--
							Options for reproducible build artifacts and smaller diffs when committing changes to the website,
							avoiding timestamps, changing current copyright years, artifact versions
						-->
						<notimestamp>true</notimestamp>
						<bottom>Copyright © 1997 to present AspectJ contributors. All rights reserved.</bottom>
						<doctitle>${project.name} API</doctitle>
						<windowtitle>${project.name} API</windowtitle>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>3.1.0</version>
					<executions>
						<!--
							Remove javadoc version number from HTML comment to keep website diffs small.
							  - In JDKs 8 to 9, the javadoc version was not added to the comment string at all,
							    see com.sun.tools.doclets.formats.html.markup.HtmlDocWriter::getGeneratedBy.
							  - In JDKs 10 to 15, the version number was suppressed together with the timestamp in '-notimestamp'
							    mode, see jdk.javadoc.internal.doclets.formats.html.markup.Head::getGeneratedBy.
							  - Since JDK 16, the version is generated into the comment string without regard of the timestamp
							    setting. :-/

							Attention: This has no effect on javadocs generated by the 'jar' goal, because they are archived while
							Maven Javadoc runs, i.e. before this plugin execution kicks in. However, it cleans the javadocs before
							Maven Resources copies them to aj-build/dist/docs/doc. I.e., they will be clean on the website, if copied
							from that folder, and also in the installer.

							TODO: In the future, maybe this execution or the whole Antrun plugin can go away, after
							  https://bugs.openjdk.org/browse/JDK-8326483 has been implemented and back-ported into all JDK
							  versions we support for javadoc generation. But if that ever happens, it might take a while.
						-->
						<execution>
							<id>filter-javadocs</id>
							<phase>package</phase>
							<goals>
								<goal>run</goal>
							</goals>
							<configuration>
								<!-- Override in modules which need to filter javadocs -->
								<skip>true</skip>
								<target>
									<!-- See https://ant.apache.org/manual/Tasks/replaceregexp.html -->
									<replaceregexp byline="true">
										<regexp pattern="^(&lt;!-- Generated by javadoc ).* (--&gt;)$"/>
										<substitution expression="\1\2"/>
										<fileset dir="${project.build.directory}/apidocs">
											<include name="**/*.html"/>
										</fileset>
									</replaceregexp>
								</target>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.asciidoctor</groupId>
					<artifactId>asciidoctor-maven-plugin</artifactId>
					<version>2.2.5</version>
					<configuration>
						<attributes>
							<source-highlighter>coderay</source-highlighter>
							<toc>left</toc>
							<toclevels>5</toclevels>
							<icons>font</icons>
							<!--
								Create separate CSS files, rather than embedding CSS into each HTML file
								TODO:
									There still is one set of CSS files per subdirectory due to the way the docs directories are
									organised. It would be better to have them just once. But to achieve that, the ADOC-to-HTML conversion
									would have to be changed, e.g. using one central directory for images and reorganisation of the
									overall directory structure and build options.
									See https://github.com/asciidoctor/asciidoctor-maven-plugin/issues/729.
							-->
							<linkcss>true</linkcss>
						</attributes>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.asciidoctor</groupId>
							<artifactId>asciidoctorj-pdf</artifactId>
							<version>2.3.10</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>.</directory>
							<includes>
								<!-- AspectJ core dumps -->
								<include>**/ajcore.*.txt</include>
								<!-- Test temp-dirs in 'weaver' module, see AsynchronousFileCacheBackingTestSupport.getCacheDir -->
								<include>**/dir-0.*/**</include>
							</includes>
							<followSymlinks>false</followSymlinks>
						</fileset>
						<fileset>
							<directory>aj-build</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>

			<!--
				This plugin is nice to have in the POM, because then it is easy to double-click a goal such as 'effective-pom',
				'active-profiles', 'effective-settings' or 'evaluate' from a modern IDE in order to get quick information about
				the current build configuration for any given module.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-help-plugin</artifactId>
			</plugin>

			<!--
				This plugin is nice to have in the POM, because then it is easy to double-click a goal such as 'analyze' or
				'tree' from a modern IDE in order to inspect dependency management in the project.

				Tip: If you want a quick overview, run this from the project from the project root directory:
				mvn -P \!create-docs dependency:analyze | grep -E '\[(WARNING|INFO\] -+< .+:.+ >-+)' > dependency-analyze.txt
				But be careful that all modules are actually listed - usually 'org.aspectj:installer' is the last one in the
				list. You can make sure by running the command without 'grep' first, then you see if there are any compile
				problems which 'grep' would filter out.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<configuration>
					<ignoredUnusedDeclaredDependencies>
						<!-- Declared in parent POM for convenience, but not used in every module -->
						<ignoredUnusedDeclaredDependency>junit:junit:jar</ignoredUnusedDeclaredDependency>
						<ignoredUnusedDeclaredDependency>org.aspectj:lib:jar</ignoredUnusedDeclaredDependency>
					</ignoredUnusedDeclaredDependencies>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>5.7.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.13.2</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>org.eclipse.jdt.core</artifactId>
				<version>${jdt.core.version}</version>
			</dependency>
			<dependency>
				<groupId>org.ow2.asm</groupId>
				<artifactId>asm</artifactId>
				<version>${asm.version}</version>
			</dependency>
			<dependency>
				<groupId>org.ow2.asm</groupId>
				<artifactId>asm-commons</artifactId>
				<version>${asm.version}</version>
			</dependency>
			<dependency>
				<!-- All modules referencing files inside 'lib' need this dependency -->
				<groupId>org.aspectj</groupId>
				<artifactId>lib</artifactId>
				<version>${project.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!--
			Actually, it would be cleaner to only define JUnit only it modules which actually use it. But since this comprises
			the majority, we can afford to be a little bit unclean here with regard to dependency management.
		-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>
