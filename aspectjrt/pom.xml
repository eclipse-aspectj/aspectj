<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectj-parent</artifactId>
		<version>1.9.23-SNAPSHOT</version>
	</parent>

	<artifactId>aspectjrt</artifactId>

	<name>AspectJ Runtime</name>
	<description>
		The AspectJ runtime is a small library necessary to run Java programs enhanced by AspectJ aspects during a previous
		compile-time or post-compile-time (binary weaving) build step.
	</description>
	<url>https://www.eclipse.org/aspectj/</url>

	<licenses>
		<license>
			<name>Eclipse Public License - v 2.0</name>
			<url>https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>aclement</id>
			<name>Andy Clement</name>
			<email>aclement@vmware.com</email>
		</developer>
		<developer>
			<id>kriegaex</id>
			<name>Alexander Kriegisch</name>
			<email>kriegaex@aspectj.dev</email>
		</developer>
	</developers>

	<scm>
		<url>https://github.com/eclipse/org.aspectj</url>
		<connection>scm:git:https://github.com/eclipse/org.aspectj.git</connection>
		<developerConnection>scm:git:ssh://git@github.com:eclipse/org.aspectj.git</developerConnection>
	</scm>

	<properties>
		<!-- By default, do not deploy artifacts - but deploy this public one -->
		<maven.deploy.skip>false</maven.deploy.skip>
		<!-- By default, do not sign artifacts - but sign this public one -->
		<maven.gpg.skip>false</maven.gpg.skip>
	</properties>

	<build>
		<plugins>

			<!-- Skip creation of main + test JARs -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<id>default-jar</id>
						<phase>none</phase>
					</execution>
					<execution>
						<id>test-jar</id>
						<phase>none</phase>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>aspectjrt-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>aspectjrt-${project.version}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<archive>
								<manifestEntries>
									<Automatic-Module-Name>org.aspectj.runtime</Automatic-Module-Name>
								</manifestEntries>

								<manifestSections>
									<manifestSection>
										<name>org/aspectj/lang/</name>
										<manifestEntries>

											<Specification-Title>AspectJ Runtime Classes</Specification-Title>
											<Specification-Version>${project.version}</Specification-Version>
											<Specification-Vendor>https://www.eclipse.org/aspectj/</Specification-Vendor>

											<Implementation-Title>org.aspectj.runtime</Implementation-Title>
											<Implementation-Version>${project.version}</Implementation-Version>
											<Implementation-Vendor>https://www.eclipse.org/aspectj/</Implementation-Vendor>

											<Bundle-Name>AspectJ Runtime</Bundle-Name>
											<Bundle-Version>${project.version}</Bundle-Version>
											<!--
												WARNING: Please avoid line breaks in manifest values! They are passed on like this:
												Assembly Plugin -> Plexus Archiver -> JRE java.util.jar.Manifest.write(OutputStream).

												The JRE Manifest class inserts hard line breaks always after 72 characters, no matter if those
												72 characters contain line feeds, tabs or spaces. Hence, it can happen that unwanted blank lines
												end up in the middle of a manifest section, making the manifest invalid. Calls like e.g.
												'java -cp aspectjtools.jar org.aspectj.tools.ajc.Main' can then fail with the absolutely
												unexpected error 'Could not find or load main class org.aspectj.tools.ajc.Main'.

												Alexander Kriegisch created this bug ticket:
												https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8263924

												In IntelliJ IDEA you can deactivate wrapping text inside XML tags like this:
												File | Settings | Editor | Code Style | XML | Wrap text -> deactivate
											-->
											<Bundle-Copyright>(C) Copyright 1999-2001 Xerox Corporation, 2002 Palo Alto Research Center, Incorporated (PARC), 2003-2020 Contributors. All Rights Reserved</Bundle-Copyright>
										</manifestEntries>
									</manifestSection>
								</manifestSections>
							</archive>

							<descriptors>
								<descriptor>aspectjrt-assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>

					<execution>
						<id>aspectjrt-sources-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<!-- The assembly ID 'sources' becomes the artifact classifier, exactly what we want -->
							<appendAssemblyId>true</appendAssemblyId>
							<skipAssembly>${maven.source.skip}</skipAssembly>
							<archive>
							</archive>
							<descriptors>
								<descriptor>aspectjrt-sources-assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>

				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>truezip-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>unzip-relocated-sources</id>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<!--
								Skip, if javadoc generation is also meant to be skipped, which is the default unless the 'release'
								profile is active or the property is overridden manually to be false. See property definitions in parent
								POM for default case and release profile.
							-->
							<skip>${maven.javadoc.skip}</skip>
							<verbose>true</verbose>
							<fileset>
								<directory>${project.build.directory}/${project.build.finalName}-sources.jar</directory>
								<outputDirectory>${project.build.directory}/unpacked-sources</outputDirectory>
							</fileset>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>javadoc-jar</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<sourcepath>${project.build.directory}/unpacked-sources</sourcepath>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<!-- Remove javadoc version number from HTML comment to keep website diffs small -->
					<execution>
						<id>filter-javadocs</id>
						<configuration>
							<skip>${maven.javadoc.skip}</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-javadoc-to-dist</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!--
								Skip, if javadoc generation is also meant to be skipped, which is the default unless the 'release'
								profile is active or the property is overridden manually to be false. See property definitions in parent
								POM for default case and release profile.
							-->
							<skip>${maven.javadoc.skip}</skip>
							<outputDirectory>${project.basedir}/../aj-build/dist/docs/doc/runtime-api</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}/apidocs</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Caveat: Attaching the flattened POM needs packaging=jar, so do not use packaging=pom for this module -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>flatten-maven-plugin</artifactId>
				<executions>
					<!-- Remove dependencies declared in this POM (if any) from uber JAR and strip down POM -->
					<execution>
						<id>flatten</id>
						<phase>process-resources</phase>
						<goals>
							<goal>flatten</goal>
						</goals>
						<configuration>
							<flattenMode>oss</flattenMode>
							<pomElements>
								<dependencies>remove</dependencies>
								<repositories>remove</repositories>
							</pomElements>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<flattenedPomFilename>flattened-pom.xml</flattenedPomFilename>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Deploy this module to Nexus (Sonatype OSSRH, releases promotable to Maven Central) -->
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
			</plugin>

		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											flatten-maven-plugin
										</artifactId>
										<versionRange>
											[1.2.2,)
										</versionRange>
										<goals>
											<goal>flatten</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencies>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>runtime</artifactId>
			<version>${project.version}</version>
		</dependency>
	</dependencies>

</project>
