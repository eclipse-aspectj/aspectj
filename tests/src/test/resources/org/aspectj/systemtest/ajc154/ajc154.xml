<!DOCTYPE suite SYSTEM "../tests/ajcTestSuite.dtd"[]>

<!-- AspectJ v1.5.4Tests -->
<suite>

   <ajc-test dir="bugs154/pr166647" title="ltw and cflow problem">
     <compile options="-1.5" files="ClassToAdvise.java,ClassWithMain.java" outjar="code.jar"/>
     <compile options="-1.5 -Xlint:ignore" files="Aspect.java" outjar="aspects.jar"/>
     <run class="a.ClassWithMain" classpath="aspects.jar,code.jar" ltw="aop1.xml">
       <stdout>
         <line text="advice fired"/>
       </stdout>
       <stderr>
       </stderr>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr211052" title="declare atType problems - 1">
     <compile options="-1.5" files="MyPojo.java"/>
     <run class="MyPojo"/>
   </ajc-test>

   <!--  DistantResource is explicitly mentioned as c.d.DistantResource -->
   <ajc-test dir="bugs154/pr211052" title="declare atType problems - 2">
     <compile options="-1.5 -showWeaveInfo" files="SimpleAnnotation.java,SimpleAspect1.java,DistantResource.java">
       <message kind="weave" text="'c.d.DistantResource' (DistantResource.java:5) is annotated with @SimpleAnnotation(classname = &quot;oranges&quot;)"/>
     </compile>
     <run class="c.d.DistantResource">
     <stdout>
       <line text="Annotation is @a.b.SimpleAnnotation(classname=oranges)" vm="-1.8"/>
       <line text="Annotation is @a.b.SimpleAnnotation(classname=&quot;oranges&quot;)" vm="9-"/>
     </stdout>
     </run>
   </ajc-test>

   <!--  DistantResource is imported and refered to as DistantResource -->
   <ajc-test dir="bugs154/pr211052" title="declare atType problems - 3">
     <compile options="-1.5 -showWeaveInfo" files="SimpleAnnotation.java,SimpleAspect2.java,DistantResource.java">
       <message kind="weave" text="'c.d.DistantResource' (DistantResource.java:5) is annotated with @SimpleAnnotation(classname = &quot;oranges&quot;)"/>
     </compile>
      <run class="c.d.DistantResource">
     <stdout>
       <line text="Annotation is @a.b.SimpleAnnotation(classname=oranges)" vm="-1.8"/>
       <line text="Annotation is @a.b.SimpleAnnotation(classname=&quot;oranges&quot;)" vm="9-"/>
     </stdout>
     </run>
   </ajc-test>

   <!--  Annotation is in a different package to the aspect and explicitly referenced with a fully qualified name -->
   <ajc-test dir="bugs154/pr211052" title="declare atType problems - 4">
     <compile options="-1.5 -showWeaveInfo" files="SimpleAnnotation2.java,SimpleAspect3.java,DistantResource.java">
       <message kind="weave" text="'c.d.DistantResource' (DistantResource.java:5) is annotated with @e.f.SimpleAnnotation2(classname = &quot;oranges&quot;)"/>
     </compile>
     <run class="c.d.DistantResource">
     <stdout>
       <line text="Annotation is @e.f.SimpleAnnotation2(classname=oranges)" vm="-1.8"/>
       <line text="Annotation is @e.f.SimpleAnnotation2(classname=&quot;oranges&quot;)" vm="9-"/>
     </stdout>
     </run>
   </ajc-test>

   <!--  Annotation is in a different package to the aspect and imported -->
   <ajc-test dir="bugs154/pr211052" title="declare atType problems - 5">
     <compile options="-1.5 -showWeaveInfo" files="SimpleAnnotation2.java,SimpleAspect4.java,DistantResource.java">
       <message kind="weave" text="'c.d.DistantResource' (DistantResource.java:5) is annotated with @SimpleAnnotation2(classname = &quot;oranges&quot;)"/>
     </compile>
     <run class="c.d.DistantResource">
     <stdout>
       <line text="Annotation is @e.f.SimpleAnnotation2(classname=oranges)" vm="-1.8"/>
       <line text="Annotation is @e.f.SimpleAnnotation2(classname=&quot;oranges&quot;)" vm="9-"/>
     </stdout>
     </run>
   </ajc-test>

   <!-- target for annotation is from a jar -->
   <ajc-test dir="bugs154/pr211052" title="declare atType problems - 6">
     <compile options="-1.5" files="DistantResource.java" outjar="target.jar"/>
     <compile options="-1.5 -showWeaveInfo" files="SimpleAnnotation2.java,SimpleAspect4.java" inpath="target.jar">
       <message kind="weave" text="'c.d.DistantResource' (DistantResource.java) is annotated with @SimpleAnnotation2(classname = &quot;oranges&quot;)"/>
     </compile>
     <run class="c.d.DistantResource">
     <stdout>
       <line text="Annotation is @e.f.SimpleAnnotation2(classname=oranges)" vm="-1.8"/>
       <line text="Annotation is @e.f.SimpleAnnotation2(classname=&quot;oranges&quot;)" vm="9-"/>
     </stdout>
     </run>
   </ajc-test>

   <!-- target for annotation is from a jar and annotation and aspect are in a different jar-->
   <ajc-test dir="bugs154/pr211052" title="declare atType problems - 7">
     <compile options="-1.5" files="DistantResource.java" outjar="target.jar"/>
     <compile options="-1.5 -Xlint:ignore" files="SimpleAnnotation2.java,SimpleAspect3.java" outjar="aspect.jar"/>
     <compile options="-1.5 -showWeaveInfo" aspectpath="aspect.jar" inpath="target.jar">
       <message kind="weave" text="'c.d.DistantResource' (DistantResource.java) is annotated with @e.f.SimpleAnnotation2(classname = &quot;oranges&quot;)"/>
     </compile>
     <run class="c.d.DistantResource">
     <stdout>
       <line text="Annotation is @e.f.SimpleAnnotation2(classname=oranges)" vm="-1.8"/>
       <line text="Annotation is @e.f.SimpleAnnotation2(classname=&quot;oranges&quot;)" vm="9-"/>
     </stdout>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr211674" title="after throwing annotation style problem - 1">
     <compile options="-1.5" files="Test.java"/>
     <run class="Test"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr211674" title="after throwing annotation style problem - 2">
     <compile options="-1.5" files="Test2.java"/>
     <run class="Test2"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr194314" title="broken lvt for woven at aspectj around advice">
     <compile options="-1.5" files="test/IService.java,test/Main.java,test/Service.java,test/ServiceInterceptor.java"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr148381/simple" title="argNames does not work - simple">
     <!-- this compile is just to get code.jar into the sandbox, all the code is already precompiled in code.jar -->
     <compile options="-1.5" files="PerformanceMonitor.java" classpath="code.jar"/>
     <run class="test.Main" classpath="code.jar" ltw="META-INF/aop.xml">
       <stdout>
         <line text="This method was intercepted by the advice: Main.foo()"/>
       </stdout>
       <stderr/>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr148381/error1" title="argNames does not work - error1">
     <!-- this compile is just to get code.jar into the sandbox, all the code is already precompiled in code.jar -->
     <compile options="-1.5" files="PerformanceMonitor.java" classpath="code.jar"/>
     <run class="test.Main" classpath="code.jar" ltw="META-INF/aop.xml">
       <stderr>
         <line text="argNames annotation value does not specify the right number of argument names for the method 'Object flagExpectationMismatch(ProceedingJoinPoint,PerformanceMonitor)'"/>
         <line text="Cannot read debug info for @Aspect to handle formal binding in pointcuts (please compile with 'javac -g' or '&lt;javac debug='true'.../&gt;' in Ant)"/>
       </stderr>
       <stdout/>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr148381/error2" title="argNames does not work - error2">
     <!-- this compile is just to get code.jar into the sandbox, all the code is already precompiled in code.jar -->
     <compile options="-1.5" files="PerformanceMonitor.java" classpath="code.jar"/>
     <run class="test.Main" classpath="code.jar" ltw="META-INF/aop.xml">
       <stderr>
         <line text="argNames annotation value does not specify the right number of argument names for the method 'Object flagExpectationMismatch(ProceedingJoinPoint,PerformanceMonitor)'"/>
         <line text="Cannot read debug info for @Aspect to handle formal binding in pointcuts (please compile with 'javac -g' or '&lt;javac debug='true'.../&gt;' in Ant)"/>
       </stderr>
       <stdout/>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr148381/error3" title="argNames does not work - error3">
     <!-- this compile is just to get code.jar into the sandbox, all the code is already precompiled in code.jar -->
     <compile options="-1.5" files="PerformanceMonitor.java" classpath="code.jar"/>
     <run class="test.Main" classpath="code.jar" ltw="META-INF/aop.xml">
       <stderr>
         <line text="argNames annotation value does not specify the right number of argument names for the method 'void a(Foo)'"/>
         <line text="Cannot read debug info for @Aspect to handle formal binding in pointcuts (please compile with 'javac -g' or '&lt;javac debug='true'.../&gt;' in Ant)"/>
         <line text="argNames annotation value does not specify the right number of argument names for the method 'void f(Foo)'"/>
         <line text="Cannot read debug info for @Aspect to handle formal binding in pointcuts (please compile with 'javac -g' or '&lt;javac debug='true'.../&gt;' in Ant)"/>
         <line text="argNames annotation value does not specify the right number of argument names for the method 'void e(Foo)'"/>
         <line text="Cannot read debug info for @Aspect to handle formal binding in pointcuts (please compile with 'javac -g' or '&lt;javac debug='true'.../&gt;' in Ant)"/>
         <line text="argNames annotation value does not specify the right number of argument names for the method 'void d(Foo)'"/>
         <line text="Cannot read debug info for @Aspect to handle formal binding in pointcuts (please compile with 'javac -g' or '&lt;javac debug='true'.../&gt;' in Ant)"/>
         <line text="argNames annotation value does not specify the right number of argument names for the method 'void c(Foo)'"/>
         <line text="Cannot read debug info for @Aspect to handle formal binding in pointcuts (please compile with 'javac -g' or '&lt;javac debug='true'.../&gt;' in Ant)"/>
         <line text="argNames annotation value does not specify the right number of argument names for the method 'void b(Foo)'"/>
         <line text="Cannot read debug info for @Aspect to handle formal binding in pointcuts (please compile with 'javac -g' or '&lt;javac debug='true'.../&gt;' in Ant)"/>
       </stderr>
       <stdout/>
     </run>
   </ajc-test>

   <!-- very basic with all code style, should be fine -->
   <ajc-test dir="bugs154/pr209019/case1" title="various issues with ltw and around advice - 1">
     <compile options="-1.5" files="A.java,DurationMethod.java,AbstractDurationMethod.java,Runner.java"/>
     <run class="Runner">
       <stdout>
         <line text="Proceeded at joinpoint call(Object a.b.A.m3())"/>
         <line text="Proceeded at joinpoint call(Object a.b.A.m2())"/>
       </stdout>
     </run>
   </ajc-test>

   <!-- switch from code style sub-aspect to annotation style sub aspect -->
   <ajc-test dir="bugs154/pr209019/case2" title="various issues with ltw and around advice - 2">
     <compile options="-1.5 -XnoInline" files="A.java,AtDurationMethod.java,AbstractDurationMethod.java,Runner.java"/>
     <run class="Runner">
       <stdout>
         <line text="Proceeded at joinpoint call(Object a.b.A.m3())"/>
         <line text="Proceeded at joinpoint call(Object a.b.A.m2())"/>
       </stdout>
       <stderr>
       </stderr>
     </run>
   </ajc-test>

   <!-- same as case2 but without -XnoInline -->
   <ajc-test dir="bugs154/pr209019/case2" title="various issues with ltw and around advice - 3">
     <compile options="-1.5" files="A.java,AtDurationMethod.java,AbstractDurationMethod.java,Runner.java"/>
     <run class="Runner">
       <stdout>
         <line text="Proceeded at joinpoint call(Object a.b.A.m3())"/>
         <line text="Proceeded at joinpoint call(Object a.b.A.m2())"/>
       </stdout>
       <stderr>
       </stderr>
     </run>
   </ajc-test>

   <!-- now loadtime weaving -->
   <ajc-test dir="bugs154/pr209019/case3" title="various issues with ltw and around advice - 4">
     <compile options="-1.5" files="A.java,AbstractDurationMethod.java,Runner.java"/>
     <run class="Runner" ltw="aop.xml">
       <stdout>
         <line text="Proceeded at joinpoint call(Object a.b.A.m3())"/>
         <line text="Proceeded at joinpoint call(Object a.b.A.m2())"/>
       </stdout>
       <stderr>
       </stderr>
     </run>
   </ajc-test>

   <!-- just checking the new syntax compiles OK -->
   <ajc-test dir="bugs154/pr169432/case1" title="declare parents problem when target already implements interface - 1">
     <compile options="-1.5" files="NonMarkerInterface.java,ClassThatAlreadyIncludesRequiredMethods.java,DeclareParentsForNonMarkerInterfaceToAClassThatAlreadyIncludeRequiredMethods.java"/>
   </ajc-test>

   <!-- now violate the rules, the types matching the pattern do not implement the interface -->
   <ajc-test dir="bugs154/pr169432/case2" title="declare parents problem when target already implements interface - 2">
    <compile options="-1.5" files="A.java">
       <message kind="error" line="20" text="@DeclareParents: No defaultImpl was specified but the type 'C1' does not implement the method 'int m()' defined on the interface 'NonMarkerInterface'"/>
       <message kind="error" line="24" text="@DeclareParents: No defaultImpl was specified but the type 'C2' does not implement the method 'int m()' defined on the interface 'NonMarkerInterface'"/>
     </compile>
   </ajc-test>

   <!-- now they do, lets check they behave as expected -->
   <ajc-test dir="bugs154/pr169432/case3" title="declare parents problem when target already implements interface - 3">
     <compile options="-1.5" files="A.java"/>
     <run class="A">
        <stdout>
            <line text="C1.m() returns 1"/>
            <line text="C2.m() returns 2"/>
        </stdout>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr202088" title="abstract annotation style pointcut with context">
     <compile options="-1.5" files="Bug.java"/>
     <compile options="-1.5" files="Bug2.java">
     </compile>
     <run class="tracing.Bug2">
       <stdout>
         <line text="o is 'instance of C'"/>
       </stdout>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr169428" title="no error for atDecp in normal class">
     <compile options="-1.5" files="CorrectError.java">
       <message kind="error" text="Advice must be declared inside an aspect type"/>
     </compile>
     <compile options="-1.5" files="NoError.java">
       <message kind="error" text="DeclareParents can only be used inside an aspect type"/>
     </compile>
   </ajc-test>

   <ajc-test dir="bugs154/pr162539" title="NPE with missing @aspect annotation in pointcut library - 1">
   	 <compile files="test/ataspectj/pointcutlibrary/HelloWorld.java, test/ataspectj/pointcutlibrary/AtAspect.java" classpath="lib.jar" options="-1.5"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr162539" title="NPE with missing @aspect annotation in pointcut library - 2">
   	<compile files="test/ataspectj/pointcutlibrary/PointcutLibrary.java, test/ataspectj/pointcutlibrary/HelloWorld.java, test/ataspectj/pointcutlibrary/AtAspect.java" options="-1.5"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr176991" title="wrong number of type parameters">
     <compile options="-1.5" files="AspectJBugTestCase.java"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr186673" title="jars and zips with non-standard suffix">
     <compile options="-1.5" files="Apple.java" outjar="apple.jar.0"/>
     <compile options="-1.5" files="Orange.java" outjar="orange.zipfoo"/>
     <!-- check ant and a standard compile -->
     <!--ant file="ant.xml" target="default" verbose="true">
        <stdout>
   	      <line text="Blah"/>
       	</stdout>
     </ant-->
     <compile options="-1.5" files="Main.java" classpath="orange.zipfoo,apple.jar.0"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface">
     <compile options="-1.5" files="Bang.java"/>
     <!--compile options="-1.5 -emacssym" files="Bang.java"/-->
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface - emacssym">
     <compile options="-1.5 -emacssym" files="Bang.java"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface - exampleA">
     <compile options="-1.5" files="ExampleA.java"/>
     <run class="ExampleA"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface - exampleB">
     <compile options="-1.5" files="ExampleB.java">
       <message kind="error" line="20" text="The method intro(String) in the type I.J&lt;String&gt; is not applicable for the arguments (int)"/>
     </compile>
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface - exampleC">
     <compile options="-1.5" files="ExampleC.java"/>
     <run class="ExampleC"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface - exampleD">
     <compile options="-1.5" files="ExampleD.java"/>
     <run class="ExampleD"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface - exampleE">
     <compile options="-1.5" files="ExampleE.java"/>
     <run class="ExampleE"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface - exampleF">
     <compile options="-1.5" files="ExampleF.java"/>
     <run class="ExampleF"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr203646" title="npe with itd on inner generic interface - exampleG">
     <compile options="-1.5" files="ExampleG.java"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr206732" title="itd clash for types from aspectpath">
     <compile outjar="foo.jar" files="Advised.aj"/>
     <compile files="Ref.aj" aspectpath="foo.jar"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr175806" title="coping with bad tables">
     <compile options="-1.5" files="A.java"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr174449" title="problem with generic aspect and generic pointcut">
     <compile options="-1.5" files="Foo.java"/>
     <run class="Foo">
       <stderr>
         <line text="around advice executing: servant class is class Boo"/>
         <line text="around advice executing: servant class is class Goo"/>
       </stderr>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr174449" title="problem with generic aspect and generic pointcut - noinline">
     <compile options="-1.5 -XnoInline" files="Foo.java"/>
     <run class="Foo">
       <stderr>
         <line text="around advice executing: servant class is class Boo"/>
         <line text="around advice executing: servant class is class Goo"/>
       </stderr>
     </run>
   </ajc-test>

   <ajc-test dir="bugs154/pr171953_2" title="problem with generic methods and ordering - ok">
	 <compile options="-1.5" files="test/ListFactoryAspect.aj, test/AbstractProcessor.java,test/ListFactory.java,test/ListFactoryConsumer.java,test/Processor.java,test/SimpleListFactoryConsumer.java">
	 </compile>
   </ajc-test>

   <ajc-test dir="bugs154/pr171953_2" title="problem with generic methods and ordering - bad">
	 <compile options="-1.5" files="test/ListFactory.java,test/ListFactoryConsumer.java,test/SimpleListFactoryConsumer.java,test/Processor.java,test/ListFactoryAspect.aj,test/AbstractProcessor.java">
	 </compile>
   </ajc-test>

   <ajc-test dir="bugs154/pr171953" title="problem with itd and join point signature collection - bad">
     <compile options="-1.5 -showWeaveInfo" files="test/AbstractExecutable.java,test/AnotherExecutable.java,test/Executable.java,test/ExecutionAspect.aj,test/SecondTestExecutable.java test/SubTestExecutable.java test/TestExecutable.java">
       <message kind="weave" text="Join point 'method-execution(void test.SecondTestExecutable.execute())' in Type 'test.SecondTestExecutable' (SecondTestExecutable.java:5) advised by around advice from 'test.ExecutionAspect' (ExecutionAspect.aj:9)"/>
       <message kind="weave" text="Extending interface set for type 'test.AbstractExecutable' (AbstractExecutable.java) to include 'java.io.Serializable' (ExecutionAspect.aj)"/>
       <message kind="weave" text="Join point 'method-execution(void test.SubTestExecutable.execute())' in Type 'test.SubTestExecutable' (SubTestExecutable.java:6) advised by around advice from 'test.ExecutionAspect' (ExecutionAspect.aj:9)"/>
       <message kind="weave" text="Join point 'method-execution(void test.TestExecutable.execute())' in Type 'test.TestExecutable' (TestExecutable.java:5) advised by around advice from 'test.ExecutionAspect' (ExecutionAspect.aj:9)"/>
     </compile>
     <run class="test.SecondTestExecutable"/>
   </ajc-test>

   <ajc-test dir="bugs154/pr171953" title="problem with itd and join point signature collection - ok">
     <compile options="-1.5 -showWeaveInfo" files="test/SecondTestExecutable.java test/AbstractExecutable.java test/AnotherExecutable.java  test/Executable.java test/ExecutionAspect.aj test/RunnableAspect.aj test/SubTestExecutable.java test/TestExecutable.java">
       <message kind="weave" text="Join point 'method-execution(void test.SecondTestExecutable.execute())' in Type 'test.SecondTestExecutable' (SecondTestExecutable.java:5) advised by around advice from 'test.ExecutionAspect' (ExecutionAspect.aj:9)"/>
       <message kind="weave" text="Extending interface set for type 'test.AbstractExecutable' (AbstractExecutable.java) to include 'java.io.Serializable' (ExecutionAspect.aj)"/>
       <message kind="weave" text="Join point 'method-execution(void test.SubTestExecutable.execute())' in Type 'test.SubTestExecutable' (SubTestExecutable.java:6) advised by around advice from 'test.ExecutionAspect' (ExecutionAspect.aj:9)"/>
       <message kind="weave" text="Join point 'method-execution(void test.TestExecutable.execute())' in Type 'test.TestExecutable' (TestExecutable.java:5) advised by around advice from 'test.ExecutionAspect' (ExecutionAspect.aj:9)"/>
     </compile>
     <run class="test.SecondTestExecutable"/>
   </ajc-test>

    <ajc-test dir="bugs154/pr171952" title="generic methods and ITDs">
      <compile files="Foo.java,FooAspect.java" options="-1.5"/>
    </ajc-test>

    <ajc-test dir="bugs154/pr169428" title="using decp annotation without aspect annotation">
      <compile files="AnAspect.java" options="-1.5">
        <message kind="error" text="Found @AspectJ annotations in a non @Aspect type 'AnAspect'"/>
      </compile>
    </ajc-test>

    <ajc-test dir="bugs154/pr170467" title="itds and parameterized parameters">
      <compile files="Bug.aj" options="-1.5"/>
      <compile files="Bug2.aj" options="-1.5"/>
    </ajc-test>

    <ajc-test dir="bugs154/pr169706" title="inherited annotations">
      <compile files="A.java,B.java,C.java,MyAspect.java,MyAnnotation.java,Test.java" options="-1.5 -showWeaveInfo">
        <message kind="weave" text="Join point 'method-call(void C.foo())' in Type 'Test' (Test.java:5) advised by before advice from 'MyAspect' (MyAspect.java:4)"/>
	  </compile>
    </ajc-test>

    <ajc-test dir="bugs154/pr165885" title="generic field npe">
      <compile files="Concrete.java,Abstract.java,Aspect.java" options="-1.5">
        <message kind="warning" line="8" text="foo"/>
	  </compile>
    </ajc-test>

    <ajc-test dir="bugs154/pr168044" title="complex generics - 1">
      <compile files="AbstractNode.java" options="-1.5">
	  </compile>
    </ajc-test>

    <ajc-test dir="bugs154/pr168063" title="incorrectly marking field transient">
      <compile files="A.java"/>
      <run class="A">
        <stdout>
          <line text="It worked, data preserved!"/>
        </stdout>
      </run>
    </ajc-test>

    <ajc-test dir="bugs154/pr166084" title="incorrect optimization of istore">
      <compile files="X.java" inpath="simple.jar"/>
	  <run class="Simple"/>
    </ajc-test>

    <ajc-test dir="bugs154/pr165631" title="dual parameterizations not allowed">
      <!-- two variations of the same situation, should fail in the same way -->
      <compile files="Bug.java" options="-1.5">
        <message kind="error" line="12" text="Cannot declare parent B"/>
      </compile>
      <compile files="Bug2.java" options="-1.5">
        <message kind="error" line="13" text="Cannot declare parent B"/>
      </compile>
    </ajc-test>

    <ajc-test dir="ltw"
      title="Suppress warnings1"
      keywords="xlint, ltw, nowarn, pr166238">
        <compile
            files="Main.java"
        >
        </compile>
        <run class="Main" ltw="aop-noxlintfile-nowarn.xml">
            <stderr/> <!-- no warnings from missing xlint file: they are suppressed -->
        </run>
    </ajc-test>

    <ajc-test dir="ltw"
      title="Suppress warnings2"
      keywords="xlint, ltw, nowarn, pr166238">
        <compile
            files="Main.java"
        >
        </compile>
        <run class="Main" ltw="aop-noxlintfile-warnnone.xml">
            <stderr/> <!-- no warnings from missing xlint file: they are suppressed -->
        </run>
    </ajc-test>

    <ajc-test dir="bugs154/pr172107" title="null returned from getField()"
		keywords="pr172107">
        <compile files="ReadWriteAJBug172107.java,Instrumentation.aj"/>
		<run class="ReadWriteAJBug172107"/>
    </ajc-test>

    <ajc-test dir="bugs154/pr197719" title="annotation style syntax and cross package extension">
      <compile files="test/aspects/C1.java,test/aspects/C3.java,test/aspects/MyAnn.java,test/aspects/MyAnnAspect.java,test/aspects2/C2.java" options="-1.5"/>
      <run class="test.aspects2.C2"/>
    </ajc-test>

    <ajc-test dir="bugs154/pr205907" title="new pointcut designators in a reference pointcut">
      <compile files="Test.aj"/>
    </ajc-test>

</suite>
